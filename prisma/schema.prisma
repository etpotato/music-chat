// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  user_agent   String?
  chats        Chat[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now()) @updatedAt
  spotify_cred SpotifyCred?
}

model Chat {
  id                 String             @id @default(uuid())
  user               User               @relation(fields: [user_id], references: [id])
  user_id            String
  name               String
  messages           Message[]
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now()) @updatedAt
  generated_messages GeneratedMessage[]
}

model Message {
  id          String            @id @default(uuid())
  text        String
  author_type MessageAuthorType
  chat        Chat              @relation(fields: [chat_id], references: [id])
  chat_id     String
  created_at  DateTime          @default(now())
  updated_at  DateTime          @default(now()) @updatedAt
  playlist    Playlist?
}

model GeneratedMessage {
  id         String   @id @default(uuid())
  text       String
  chat       Chat     @relation(fields: [chat_id], references: [id])
  chat_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  tracks      Track[]
  message     Message  @relation(fields: [message_id], references: [id])
  message_id  String   @unique
  spotify_id  String?
}

model Track {
  id           String   @id @default(uuid())
  name         String
  author       String
  album        String
  release_date DateTime
  playlist     Playlist @relation(fields: [playlist_id], references: [id])
  playlist_id  String
  spotify_id   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
}

model SpotifyCred {
  id            String    @id @default(uuid())
  state         String
  code          String?
  scope         String?
  token_type    String?
  access_token  String?
  expires_in    Int?
  expires       DateTime?
  refresh_token String?
  name          String?
  avatar        String?
  user_id       String    @unique
  user          User      @relation(fields: [user_id], references: [id])
  creaded_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt
}

enum MessageAuthorType {
  User
  Robot
}
